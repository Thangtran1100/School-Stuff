package model;


import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class Management {
    private List<PatientEntry> patients;
    private List<VaccineEntry> vaccines;
    
    public Management() {
        this.patients = new ArrayList<PatientEntry>();
        this.vaccines = new ArrayList<VaccineEntry>();
    }
    
    public void updatePatient(String patientId, VaccineEntry vaccine) {
    	
    	DateTimeFormatter formatDate = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    	
        PatientEntry patient = getPatientById(patientId);
        if (patient != null && vaccine != null) {
            patient.setVaccine(vaccine.getVaccine());
            if (vaccine.getVaccine().getDoseRequired() == "2" && patient.getSecondDoseDate() == null && vaccine.getTotalDoseLeft() > 0) {
                vaccine.setTotalDoseLeft(String.valueOf(vaccine.getTotalDoseLeft() - 1));
                //patient.setSecondDoseDate(formatDate.format(LocalDate.now()).toString());
            }
        }
        
     // update the patient and vaccine lists
        for (int i = 0; i < patients.size(); i++) {
            if (String.valueOf(patients.get(i).getUuid()).equals(patientId)) {
            	patients.set(i, patient);
                break;
            }
        }
        for (int i = 0; i < vaccines.size(); i++) {
            if (String.valueOf(vaccines.get(i).getId()).equals(vaccine.getId())) {
            	vaccines.set(i, vaccine);
                break;
            }
        }
    }
    
    public void addPatient(PatientEntry newPatient) {
        patients.add(newPatient);
    }
    
    public void removePatient(int patientId) {
    	for (int i = 0; i < patients.size(); i++) {
    		if (patients.get(i).getId() == patientId) {
                patients.remove(i);
                break;
            }
        }
    }
    
    public PatientEntry getPatientById(String patientId) {
        for (PatientEntry patient : patients) {
            if (patient.getUuid() == patientId) {
                return patient;
            }
        }
        return null;
    }
    
    public List<PatientEntry> getAllPatients() {
        return patients;
    }
    
    public void addVaccine(VaccineEntry vaccine) {
        vaccines.add(vaccine);
    }

    public void removeVaccine(VaccineEntry vaccine) {
        vaccines.remove(vaccine);
    }

    public List<VaccineEntry> getAvailableVaccines() {
        List<VaccineEntry> availableVaccines = new ArrayList<VaccineEntry>();
        
        for (VaccineEntry vaccine : vaccines) {
            if (vaccine.getTotalDoseLeft() > 0) {
                availableVaccines.add(vaccine);
            }
        }
        return availableVaccines;
    }
    
    public VaccineEntry getVaccineByName(String name) {
        for (VaccineEntry vaccine : vaccines) {
            if (vaccine.getVaccine().getVaccineName().equalsIgnoreCase(name)) {
                return vaccine;
            }
        }
        return null;
    }
}
